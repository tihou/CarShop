<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder location="classpath:database.properties" />
	<!-- 使用jndi连接池 -->
	<!-- <bean id="${jndi.datasource.id}" class="org.springframework.jndi.JndiObjectFactoryBean"> <property 
		name="jndiName" value="${jndi.datasource.name}" /> </bean> -->
	<!--创建druid数据源 -->
	<bean id="DruidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<!-- 阿里巴巴的druid连接池不需要指定driverClass,它会根据url自动识别 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.userName}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters,防sql注入,日志记录 -->
		<property name="filters" value="stat,wall,log4j" />
	</bean>
	<!--创建dbcp数据源 -->
	<bean id="DbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.userName}" />
		<property name="password" value="${jdbc.password}" />
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 设置数据源中返回的连接是否采用自动机制,默认值为true -->
		<property name="defaultAutoCommit" value="true" />
		<!-- 设置数据源是否仅能执行只读操作,默认值为:false -->
		<property name="defaultReadOnly" value="false" />
		<!-- <property name="poolPreparedStatements" value="true"/> <property name="maxOpenPreparedStatements" 
			value="10" /> -->
		<!-- 每隔多少毫秒执行一次idle连接的清理 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 连接池的最大数据库连接数,设置为0时,表示没有限制 -->
		<property name="maxActive" value="15" />
		<property name="initialSize" value="5" />
		<!-- 数据库连接的最大连接数。超过此数，数据库连接将被标记为不可用，然后被释放,设置为0时,表示没有限制 -->
		<property name="maxIdle" value="8" />
		<property name="minIdle" value="0" />
		<!-- 最大建立连接等待时间.如果超过此时间将接到异常.设为－1表示无限制,单位毫秒. -->
		<property name="maxWait" value="10000" />
		<!-- 用于验证连接是否成功的查询SQL语句,SQL语句必需至少要返回一行数据,如可以简单的设置为:"select count(*) from test" <property name="validationQuery" 
			value=""/> -->
		<!-- 回收被遗弃的(空闲时间超过removeAbandonedTimeout设置的时间)数据库连接到连接池中,默认为false -->
		<property name="removeAbandoned" value="true" />
		<!-- 数据库连接多长时间不用将被视为被遗弃而收回连接池中,在removeAbandoned=true时需要设置该值,单位秒 -->
		<property name="removeAbandonedTimeout" value="300" />
		<!-- 将被遗弃的数据库连接的回收记入日志,默认为false -->
		<property name="logAbandoned" value="true" />
	</bean>
	<!--创建c3p0数据源 -->
	<bean id="C3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.userName}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="1" />
		<!-- 连接池中保留的最大连接数 -->
		<property name="maxPoolSize" value="30" />
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="5" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0. MySQL默认是8小时(28800秒)后自动关闭已打开的连接,所以c3p0要在8小时内关闭不使用的连接, 
			maxIdleTime和idleConnectionTestPeriod参数要小于28800秒 -->
		<property name="maxIdleTime" value="60" />
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="1000" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="autoCommitOnClose" value="false" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
		<property name="checkoutTimeout" value="2000" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3 -->
		<property name="numHelperThreads" value="3" />
		<!--用户修改系统配置参数执行前最多等待300秒。Default: 300 -->
		<property name="propertyCycle" value="300" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection" value="0" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="5" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。Default: 
			false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin" value="true" />
	</bean>
	<!-- 动态数据源配置 -->
	<bean id="dataSource" class="com.liming.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- <entry key="${jndi.datasource.id}" value-ref="${jndi.datasource.id}" /> -->
				<entry key="${druid.datasource.id}" value-ref="DruidDataSource" />
				<entry key="${dbcp.datasource.id}" value-ref="DbcpDataSource" />
				<entry key="${c3p0.datasource.id}" value-ref="C3p0DataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="${default.datasource.id}" />
	</bean>
</beans>